Flak框架

1.request常用属性

	request 
		在web应用，与客户端发送给服务器的数据至关重要，在Flask中由全局的request对象来提供这些信息

	request请求 请求方式常用的有两种：post 和get，
	get请求向后台获取页面需要的数据，
	post请求将页面的数据发送到后台 post是安全的，请求信息不像get那样暴露在url地址上，比较安全。
	http协议默认post请求是安全的，所以需要csrf验证

	csrf是跨站请求伪造 	
		这是一种对网站的恶意应用，依赖web浏览器的，被混淆(xiao)的代理人攻击。
			1.普通用户访问正常的网站 登陆账户
			2.正常网站 实现状态保持写入了cookie
			3.用户在未登出网站的情况下 访问了恶意网站 
			4.在用户主观未知的情况下再次访问了正常的网站
	
		跨站请求保护
			1.在请求参数加入了混淆字符串 csrf_token
			2.response.setcookie("csrf_token",csrf_token)
			3.服务器会获取客户端浏览器中的csrf_token和模板页面中csrf_token进行比较 如果一致 该请求不是被伪造的

		打开浏览器访问某个url，默认的是get请求，也就是说你只要访问了某个url 对应的视图函数里只要不是 if xx==post的 就会执行，所以你打开页面 他会先生成了cookie（token）的值返回给浏览器，然后你提交表单，或者ajax的请求 会将流浪器的cookie的信息发送给服务器进行token比对 这个过程相对于你发起了两次请求 第一次是get 第二次才是post

	request是flask请求上下文的一种，上下文是一个保存了前端（客户端）和后台（服务器）连接状态的容器 session表示用户的信息 request表示的请求参数信息

	应用上下文 flask应用程序在运行过程中 保存的一些配置信息 比如配置程序名，数据库连接，应用信息等

	上下文保存的就是 我们说的request常用的一些属性

	查询参数args url地址上最后面传给服务器的参数
	请求数据data 客户端发送给服务器原始的数据，并转化为string
	上传的文件files 前端上传给后台发送的文件，图片等
	表单 form 表单数据

	cookie 浏览器状态保持的一种
		http底层是TCP/IP协议 无状态的 每次连接都要三次握手 四次挥手  无状态协议
		三次握手：
			第一次握手，建立连接客户端发送syn包(syn=j)给服务器，并进入到SYN_SENT状态，等待服务器的确认
			第二次握手，服务器收到syn包 必须确认客户的syn（ack=j+1），同时自己也发送一个syn包(syn=k)即SYN+ACK包，服务器静茹SYN_RECV状态
			第三次握手，客户端收到服务器SYN+ACK包 向服务器发送确认包ACK(ack=k+1) 客户端服务器进入ESTABLISHED(tcp连接成功状态)
						客户端    					服务器
			第一次 				发送syn(syn=j)
								SYN_SENT

			第二次 				收到SYN(ack=j+1) 确认
								发送SYN包(syn=k) SYN+ACK
								SYN_RECV

			第三次 				收到SYN+ACK
						 		发送ACK(ack=k+1)
						 		ESTABLISHED

			第一次建立连接客户端向服务器发送请求，我要跟你建立连接，第二次服务器收到了客户端要建立连接的请求，我确认了要和你建立连接，我也要发送一个连接请求和我确认了和你连接 第三次客户端收到了确认连接请求和建立连接请求，客户端给服务器发送 我确认了和你建立连接 双方都建立成功

			建立三次握手 多出一次确认请求的原因 是为了防止已失效的连接请求报文段又一次发送给了服务器，已失效的连接请求报文段可能并没有丢失而是某个网络节点滞留较长时间 以至于延误到请求释放后某个时间段到达服务器 会浪费许多服务器的资源 三次握手是为了更好的防止浪费资源


		四次挥手：
			第一次挥手 客户端向服务器发送请求 我不跟你建立连接
			第二次挥手 服务器收到了请求 说 你不跟我建立连接  发送给客户端说 我知道了你不和我建立连接了
			第三次挥手 服务器 你不跟我建立连接，那我也不跟你建立连接了
			发送给客户端说 ，我不和你连接了
			第四次挥手 客户端收到了服务器不和你连接的消息后，向服务器发送，我也知道你不和我建立连接了那BYEBYE

		连接的时候三次握手 四次挥手

			server收到了client端的syn发送的请求报文后 可以直接发送SYN+ACK报文，其中ack报文是用来应答的
			关闭连接的时候SYN+ACK不能一起发送 ，服务端可能不会立即关闭SOCKET,只能先回复一个ACK报文 我收到了你的不和我建立连接的信息，只有等服务端的报文全部都发送完毕才可以


		四次挥手
		所谓的无状态就是 一次用户请求时 浏览器服务器无法知道这个用户做过什么 每次请求都是一次新的请求 无状态的

		http是无状态的 连接时数据是互通的 关闭后数据是不互通的，永久性失忆
		无状态的：浏览器和服务器之间使用的是socket通信，一旦关闭了浏览器 四次挥手之后就销毁了所有交互信息
		要想使浏览器和服务器之间保持状态 
			客户端采取存储cookie（dict 用户个人信息 不安全 每个域名下 cookie独立存在 互不干扰）保持状态 
			服务器存储session(依赖于cookie存在 比cookie安全 cookie数字不会转成字符串，而cookie会) 	保持状态
2.flask_aqlalchemy 中orm 一对多的模型关系定义
	1.首先定义两个模型 Role和User  Role与User对应的关系是一对多的关系
	2.在多的一方添加一的一方id作为外键 形成关联关系
	3.如果想通过一的一方访问多的一方那么在Role中定义属性users=sb.relationship(多的一方模型名)
	4.如果想要在多的一方访问一的一方 那么在上一步中添加backre

	在实际项目中一堆多的事物关系特别多 比如一个作者可以有多本书，而那本书只能是一个作者 那么这个人和书就是一对多关系，其实搞一对多，一对一的模型，本质是减少了数据库表的创建，方便数据的查询 设置外键建立关系后，你的人可以访问书的所有属性，书也能取到这个人里面的所有属性，根据不同的业务逻辑去数据库拿到数据返回给前端 浏览器渲染显示就可以了
3.数据库迁移的步骤
	1.生成迁移文件 python xxx.py py db init
	2.生成当前版本的迁移文件 python xxx.py migrate -m"注释"
	3.执行迁移 python xxx.py upgrade

	数据库秦阿姨 本质就是同步项目中数据表到数据库中，项目没有智能到你这边添加，修改对象表，你数据库那边就立马更新了数据表，需要你手动写sql语句commit提交数据，它才能更新，web框架为了简化操作 封装了一套操作工具叫migrate，终端几个简单的操作命令就能实现数据的表同步，见得就散步 生成迁移文件夹，项目中更改表后执行生成迁移文件，执行迁移
